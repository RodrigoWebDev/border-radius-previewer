{"version":3,"sources":["components/controller.js","serviceWorker.js","components/header.js","components/footer.js","components/box.js","components/code.js","index.js"],"names":["props","rotate","styles","createUseStyles","input","position","top","bottom","left","right","width","display","margin","textAlign","transform","css","name","className","onChange","handleChange","type","value","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","title","marginBottom","footer","href","box","height","maxWidth","background","borderRadius","border","log","textarea","overflow","button","ref","refProp","codeText","readOnly","onClick","copyText","boxContainer","App","useState","setTop","setRight","setBottom","setLeft","val","e","eval","alertMsg","Swal","mixin","toast","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","icon","codeAreaRef","current","select","document","execCommand","borderStyle","useRef","boxWidth","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.49d96106.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { createUseStyles } from \"react-jss\";\r\n\r\nexport default (props) => {\r\n  const rotate = props.rotate ? props.rotate : \"none\";\r\n  //Styles\r\n  const css = createUseStyles({\r\n    input: {\r\n      position: \"absolute\",\r\n      top: (props) => props.top,\r\n      bottom: (props) => props.bottom,\r\n      left: (props) => props.left,\r\n      right: (props) => props.right,\r\n      width: `${props.width} !important`,\r\n      display: \"block !important\",\r\n      margin: \"0px !important\",\r\n      textAlign: \"center !important\",\r\n      \"-webkit-transform\": rotate,\r\n      \"-moz-transform\": rotate,\r\n      \"-o-transform\": rotate,\r\n      \"-ms-transform\": rotate,\r\n      transform: rotate,\r\n    },\r\n  });\r\n\r\n  const styles = css(props);\r\n\r\n  return (\r\n    <input\r\n      name={props.name}\r\n      className={styles.input}\r\n      onChange={props.handleChange}\r\n      type=\"range\"\r\n      value={props.value}\r\n    />\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport {createUseStyles} from \"react-jss\"\r\n\r\nconst css = createUseStyles({\r\n    title: {\r\n        textAlign: \"center\",\r\n        marginBottom: \"50px\",\r\n    }\r\n})\r\nexport default () => {\r\n    const styles = css()\r\n    return(\r\n        <header className=\"header\">\r\n            <h1 className={styles.title}>Border Radius Previewer</h1>\r\n        </header>\r\n    )\r\n}","import React from \"react\"\r\nimport { createUseStyles } from \"react-jss\"\r\n\r\nconst css = createUseStyles({\r\n    footer: {\r\n        textAlign: \"center\"\r\n    }\r\n})\r\n\r\nexport default () => {\r\n    const styles = css()\r\n    return(\r\n        <footer className={styles.footer}>\r\n            Created by <a href=\"https://rqueiroz.netlify.com/\">Rodrigo Queiroz</a>\r\n        </footer>\r\n    )\r\n}","import React from \"react\";\r\nimport { createUseStyles } from \"react-jss\";\r\n\r\nconst css = createUseStyles({\r\n  box: {\r\n    height: \"300px\",\r\n    width: \"300px\",\r\n    maxWidth: \"100%\",\r\n    background: \"var(--gradient-color)\",\r\n    borderRadius: (props) => props.border,\r\n    margin: \"0 auto\",\r\n  },\r\n  \"@media (max-width: 450px)\": {\r\n    box: {\r\n      width: \"200px\",\r\n      height: \"200px\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default (props) => {\r\n  console.log(props.border);\r\n  const styles = css(props);\r\n\r\n  return <div className={styles.box}></div>;\r\n};\r\n","import React from \"react\";\r\nimport { createUseStyles } from \"react-jss\";\r\n\r\n//styles\r\nconst css = createUseStyles({\r\n  textarea: {\r\n    height: \"81px !important\",\r\n    overflow: \"auto\",\r\n  },\r\n  button: {\r\n    marginBottom: \"20px\",\r\n    background: \"var(--gradient-color)\",\r\n  },\r\n});\r\n\r\nexport default (props) => {\r\n  const styles = css();\r\n  return (\r\n    <div className=\"code\">\r\n      <textarea\r\n        ref={props.refProp}\r\n        value={props.codeText}\r\n        readOnly\r\n        className={styles.textarea}\r\n      />\r\n      <button onClick={props.copyText} className={styles.button}>\r\n        Copy Code\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useRef } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./App.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createUseStyles } from \"react-jss\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"./swal-theme.css\";\r\n\r\nimport Header from \"./components/header\";\r\nimport Footer from \"./components/footer\";\r\nimport Box from \"./components/box\";\r\nimport Code from \"./components/code\";\r\nimport Controller from \"./components/controller\";\r\n\r\n//Styles\r\nconst css = createUseStyles({\r\n  boxContainer: {\r\n    position: \"relative\",\r\n    maxWidth: \"300px\",\r\n    margin: \"0 auto\",\r\n    border: \"3px dashed var(--text-color)\",\r\n    \"z-index\": \"3\",\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  //State\r\n  const [top, setTop] = useState(50);\r\n  const [right, setRight] = useState(25);\r\n  const [bottom, setBottom] = useState(50);\r\n  const [left, setLeft] = useState(25);\r\n\r\n  //Functions\r\n  function handleChange(val) {\r\n    return function (e) {\r\n      eval(`${val}(e.target.value)`);\r\n    };\r\n  }\r\n\r\n  function alertMsg() {\r\n    Swal.mixin({\r\n      toast: true,\r\n      position: \"top-end\",\r\n      showConfirmButton: false,\r\n      timer: 3000,\r\n      timerProgressBar: true,\r\n      onOpen: (toast) => {\r\n        toast.addEventListener(\"mouseenter\", Swal.stopTimer);\r\n        toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\r\n      },\r\n    }).fire({\r\n      icon: \"success\",\r\n      title: \"Text copied successfully\",\r\n    });\r\n\r\n    //debugger\r\n  }\r\n\r\n  function copyText() {\r\n    //Copy Text\r\n    codeAreaRef.current.select();\r\n    document.execCommand(\"copy\");\r\n\r\n    alertMsg();\r\n  }\r\n\r\n  //Variables\r\n  const borderStyle = `${top}% ${right}% ${bottom}% ${left}%`;\r\n  const codeText = `-webkit-border-radius: ${borderStyle}; \r\n-moz-border-radius: ${borderStyle}; \r\nborder-radius: ${borderStyle};\r\n    `;\r\n  const codeAreaRef = useRef(null);\r\n  const styles = css();\r\n  const boxWidth = \"300px\";\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className={styles.boxContainer}>\r\n        <Controller\r\n          top=\"-5px\"\r\n          left=\"0px\"\r\n          right=\"unset\"\r\n          bottom=\"unset\"\r\n          width={boxWidth}\r\n          value={top}\r\n          handleChange={handleChange(\"setTop\")}\r\n          name=\"top\"\r\n        />\r\n        <Controller\r\n          top=\"48%\"\r\n          left=\"unset\"\r\n          right=\"-153px\"\r\n          bottom=\"unset\"\r\n          width={boxWidth}\r\n          rotate=\"rotate(90deg)\"\r\n          value={right}\r\n          handleChange={handleChange(\"setRight\")}\r\n          name=\"right\"\r\n        />\r\n        <Controller\r\n          top=\"unset\"\r\n          left=\"0px\"\r\n          right=\"unset\"\r\n          bottom=\"-5px\"\r\n          width={boxWidth}\r\n          rotate=\"rotate(180deg)\"\r\n          value={bottom}\r\n          handleChange={handleChange(\"setBottom\")}\r\n          name=\"bottom\"\r\n        />\r\n        <Controller\r\n          top=\"48%\"\r\n          left=\"-153px\"\r\n          right=\"unset\"\r\n          bottom=\"unset\"\r\n          width={boxWidth}\r\n          rotate=\"rotate(-90deg)\"\r\n          value={left}\r\n          handleChange={handleChange(\"setLeft\")}\r\n          name=\"left\"\r\n        />\r\n        <Box border={borderStyle} value={top} />\r\n      </div>\r\n      <Code refProp={codeAreaRef} codeText={codeText} copyText={copyText} />\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}